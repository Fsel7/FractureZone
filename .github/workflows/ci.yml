name: Builds Project

on: [push, pull_request]

jobs:
  windows:
    name: run on windows
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - uses: ilammy/msvc-dev-cmd@v1.4.1
      with:
        arch: x86
    
    - name: Set up environment on Windows
      run: |
        if (-not (Get-Command cmake -ErrorAction SilentlyContinue)) {
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y
        }

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake for 32-bit
      run: cmake -S . -B build -A Win32

    - name: Build project
      run: cmake --build build

  mac-and-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up 32-bit environment on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt-get install -y build-essential g++-multilib libc6-dev-i386
        if ! command -v cmake &> /dev/null; then
          sudo apt-get install -y cmake
        fi

    - name: Set up environment on macOS
      if: matrix.os == 'macos-latest'
      run: |
        if ! command -v brew &> /dev/null; then
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        if ! command -v cmake &> /dev/null; then
          brew install cmake
        fi
        if ! command -v gcc &> /dev/null; then
          brew install gcc
        fi

    - name: Create build directory
      run: mkdir build

    - name: Configure CMake for 32-bit
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          cmake -S . -B build -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          cmake -S . -B build -DCMAKE_OSX_ARCHITECTURES=x86_64
        fi

    - name: Build project
      run: cmake --build build